#!/usr/bin/python
import __init__,os,sys,glob,shutil,zipfile,uuid,json,cgi
from bottle import bottle
from pedant.webapp import *

"""
TODO: REFACTORING. Move operations to pedant package
"""


config = json.load( open(os.path.realpath( os.path.dirname( __file__ ) + os.sep + "pedant.conf.json" ) ))
config[ 'data_storage_root' ] = os.path.realpath( os.path.dirname( __file__ ) + os.sep +'..'+ os.sep +'web'+ os.sep +'data_storage' )
config[ 'tmp_root' ] = os.path.realpath( os.path.dirname( __file__ ) + os.sep + os.sep +'..'+ os.sep +'tmp' )

#create tmp dir
if not os.path.isdir( config['tmp_root'] ):
	os.makedirs( config['tmp_root'] )

app = bottle.Bottle()
#templates_dir init in pedant.webapp module
bottle.TEMPLATE_PATH.insert(0, templates_dir)

def accessible( prj ):
	return ( os.path.isdir( config[ 'data_storage_root' ] + os.sep + prj ) and ( not os.path.isfile( config[ 'data_storage_root' ] + os.sep + prj + os.sep + 'lock.file') ) )

def template( template , **kwargs ):
	return bottle.template( ''.join(open(templates_dir + os.sep + template, 'r').readlines()), kwargs )

def json_error( message ):
	return { 'status':'ERROR', 'msg':message }

def access_error( project ):
	return json_error( 'Operation for project ('+config['data_storage_root']+os.sep+project+os.sep+') failed. Causes: lock file (lock.file) is exists. Pedant-screens can be running. Project not exists or report file is broken')

def get_report_data( project, timestamp ):
	prj_root = config['data_storage_root'] + os.sep + project
	approved_root = prj_root + os.sep + 'approved'
	report_root = prj_root + os.sep + 'reports' + os.sep + timestamp
	data = list()
	for json_path in glob.glob( report_root + os.sep + '*' + os.sep + '*' + os.sep + 'report.json' ):
		json_content=open(json_path)
		json_data = json.load(json_content)
		json_content.close()
		json_data['images'] = { 'approved': False, 'actual': False, 'approved_report': False, 'diff': False}
		approved_path = approved_root + os.sep + json_data['item']['unid'] + os.sep + json_data['browser']['unid'] + os.sep + 'approved.png'
		report_dir = report_root + os.sep + json_data['item']['unid'] + os.sep + json_data['browser']['unid'] + os.sep
		#check images exists
		if os.path.isfile( approved_path ):
			json_data['images']['approved'] = '/' + project + '/static/approved/' + json_data['item']['unid'] + '/' + json_data['browser']['unid'] + os.sep + 'approved.png'
		if os.path.isfile( report_dir + 'approved_report.png' ):
			json_data['images']['approved_report'] = '/' + project + '/static/reports/' + timestamp + '/' + json_data['item']['unid'] + '/' + json_data['browser']['unid'] + os.sep + 'approved_report.png'
		if os.path.isfile( report_dir + 'actual.png' ):
			json_data['images']['actual'] = '/' + project + '/static/reports/' + timestamp + '/' +  json_data['item']['unid']  + '/' + json_data['browser']['unid'] + os.sep + 'actual.png'
		if os.path.isfile( report_dir + 'diff.png' ):
			json_data['images']['diff'] = '/' + project + '/static/reports/' + timestamp + '/' + json_data['item']['unid'] + '/' + json_data['browser']['unid'] + os.sep + 'diff.png'		
		data.append( json_data )
	return data

def get_approved_images( project ):
	approved_root = config['data_storage_root'] + os.sep + project + os.sep + 'approved' 
	web_path_root = "/" + project + '/static/approved/'
	data = list()
	#print  approved_root + os.sep + '*' + os.sep + '*' + os.sep + 'approved.png'

	for img in glob.glob( approved_root + os.sep + '*' + os.sep + '*' + os.sep + 'approved.png' ):
		itemname = os.path.basename( os.path.dirname( os.path.dirname( img ) ) )
		browser = os.path.basename( os.path.dirname( img ) )
		data.append( { 'name':itemname,'browser':browser,'image':web_path_root + '/' + itemname + '/' + browser + '/approved.png' } )
	return data

#pedant static
@app.route('/assets/<path:path>')
def callback(path):
    return bottle.static_file(path,templates_dir + os.sep + 'assets')

#pedant report images
@app.route('/<project>/static/<path:path>')
def callback(project,path):
    return bottle.static_file(path,config['data_storage_root']+os.sep+project)

#coming soon page
@app.route('/coming_soon')
@bottle.view('coming_soon.tpl')
def index():
	return {}

#main page
@app.route('/')
@bottle.view('index.tpl')
def index():
	prj_list = map(lambda x: os.path.basename( os.path.dirname(x) ), glob.glob( config['data_storage_root'] + os.sep + '*' + os.sep ) )
	return { 'prj_list': prj_list } 

#project main page. static
@app.route('/<project>')
def index(project):
	bottle.redirect(project+"/reports")

#project reports list. reports
@app.route('/<project>/reports')
@bottle.view('prj_reports.tpl')
def index(project):
	rep_list = map(lambda x: os.path.basename( os.path.dirname(x) ), glob.glob( config['data_storage_root'] + os.sep + project + os.sep + 'reports' + os.sep + '*' + os.sep ) )
	rep_list.sort( reverse=True )
	return { 'project': project, 'reports_list': rep_list }

#project last report
@app.route('/<project>/reports/last')
@bottle.view('prj_report.tpl')
def index(project):
	rep_list = map(lambda x: os.path.basename( os.path.dirname(x) ), glob.glob( config['data_storage_root'] + os.sep + project + os.sep + 'reports' + os.sep + '*' + os.sep ) )
	rep_list.sort( reverse=True )
	if len( rep_list ) < 1:
		bottle.redirect( "/" + project + "/reports")
	return { 'project': project, 'timestamp': rep_list[0] , 'report_list': get_report_data( project , rep_list[0] ) }

#project report detail
@app.route('/<project>/reports/<timestamp>')
@bottle.view('prj_report.tpl')
def index(project,timestamp):
	return { 'project': project, 'timestamp' :timestamp, 'report_list' :get_report_data( project , timestamp ) }

#project approved images
@app.route('/<project>/approved')
@bottle.view('prj_approved.tpl')
def index(project):
	return { 'project': project, 'approved_list': get_approved_images( project ) }

#project item timeline
@app.route('/<project>/timeline/<item>')
def index(project,item):
	return bottle.redirect("/coming_soon")
	
#approve actual image in project file
@app.route('/<project>/ajax/approve/<timestamp>/<item>/<browser>')
def approve(project,timestamp,item,browser):

	item_dir = item + os.sep + browser + os.sep
	item_web_path = item + '/' + browser + '/'
	report_dir = config['data_storage_root'] + os.sep + project + os.sep + 'reports' + os.sep + timestamp + os.sep + item_dir
	approved_path = config['data_storage_root'] + os.sep + project + os.sep + 'approved' + os.sep + item_dir + os.sep + 'approved.png'

	if accessible( project ) and os.path.isfile( report_dir + 'report.json' ):
		#if approved_report exists - move it ot {original_path}.bckp
		if os.path.isfile( report_dir + 'approved_report.bckp' ):
			os.remove( report_dir + 'approved_report.bckp' )
		if os.path.isfile( report_dir + 'approved_report.png'):
			os.rename( report_dir + 'approved_report.png' , report_dir + 'approved_report.bckp' )
		#backup diff
		if os.path.isfile( report_dir + 'diff.bckp' ):
			os.remove( report_dir + 'diff.bckp' )
		if os.path.isfile( report_dir + 'diff.png'):
			os.rename( report_dir + 'diff.png' , report_dir + 'diff.bckp' )
		#backup global approved
		if os.path.isfile( approved_path + '.bckp' ):
			os.remove( approved_path + '.bckp' )
		if os.path.isfile( approved_path):
			os.rename( approved_path, approved_path + '.bckp' )
		#backup json
		if os.path.isfile( report_dir + 'report.bckp' ):
			os.remove( report_dir + 'report.bckp' )

		os.rename( report_dir + 'report.json', report_dir + 'report.bckp' )
		#get original json data
		json_file=open(report_dir + 'report.bckp')
		json_data = json.load(json_file)
		json_file.close()

		#create approved folder if it's need
		if not os.path.isdir( os.path.dirname(approved_path) ):
			os.makedirs(os.path.dirname(approved_path))
		#copy actual to approved and report
		shutil.copyfile( report_dir + 'actual.png', approved_path )
		shutil.copyfile( report_dir + 'actual.png', report_dir + 'approved_report.png' )
		#update json, save it to file
		json_data['msg'] = "success"
		obj = open( report_dir + 'report.json' , 'wb')
		json.dump( json_data, obj )
		obj.close
		#additional info
		json_data['status'] = "OK"
		#images html
		json_data['images'] = {
			'approved': template( 
							template='prj_report_image.tpl', 
							img = '/' + project + '/static/approved/' + item_web_path + 'approved.png',
							alt = 'Approved',
							status = json_data['msg'] ),
			'approved_report': template( 
							template='prj_report_image.tpl', 
							img = '/' + project + '/static/reports/' + timestamp + '/' + item_web_path + 'approved_report.png',
							alt = 'Approved in report',
							status = json_data['msg'] ),
			'diff': template( 
							template='prj_report_image.tpl', 
							img = False,
							alt = 'Diff',
							status = json_data['msg'] )
		}
		#return data
		return json_data
	return access_error( project )

#disapprove actual image in project file
@app.route('/<project>/ajax/cancel-approve/<timestamp>/<item>/<browser>')
def cancel_approve(project,timestamp,item,browser):
	item_dir = item + os.sep + browser + os.sep
	item_web_path = item + '/' + browser + '/'
	report_dir = config['data_storage_root'] + os.sep + project + os.sep + 'reports' + os.sep + timestamp + os.sep + item_dir
	approved_path = config['data_storage_root'] + os.sep + project + os.sep + 'approved' + os.sep + item_dir + os.sep + 'approved.png'	
	if accessible( project ) and os.path.isfile( report_dir + 'report.bckp' ):
		#web imgs pathes
		approved_img_web = False
		approved_report_img_web = False
		diff_img_web = False
		#restore backup approved
		if os.path.isfile( approved_path ):
			os.remove(approved_path)
		if os.path.isfile( approved_path + '.bckp' ):
			os.rename( approved_path + '.bckp', approved_path )
			approved_img_web = '/' + project + '/static/approved/' + item_web_path + 'approved.png'
		
		#restore backup approved_report
		if os.path.isfile( report_dir + 'approved_report.png' ):
			os.remove(report_dir + 'approved_report.png')
		if os.path.isfile( report_dir + 'approved_report.bckp' ):
			os.rename( report_dir + 'approved_report.bckp' , report_dir + 'approved_report.png' )
			approved_report_img_web = '/' + project + '/static/reports/' + timestamp + '/' + item_web_path + 'approved_report.png'
		
		if os.path.isfile( report_dir + 'diff.png' ):
			os.remove( report_dir + 'diff.png' )
		#restore backup diff
		if os.path.isfile( report_dir + 'diff.bckp' ):
			os.rename( report_dir + 'diff.bckp' , report_dir + 'diff.png' )
			diff_img_web = '/' + project + '/static/reports/' + timestamp + '/' + item_web_path + 'diff.png'

		#restore report.json
		if os.path.isfile( report_dir + 'report.json' ):
			os.remove( report_dir + 'report.json' )
		
		os.rename( report_dir + 'report.bckp' , report_dir + 'report.json' )
		#read report
		json_file=open(report_dir + 'report.json')
		json_data = json.load(json_file)
		json_file.close()
		json_data['images'] = {
			'approved': template( 
							template='prj_report_image.tpl', 
							img = approved_img_web,
							alt = 'Approved',
							status = json_data['msg'] ),
			'approved_report': template( 
							template='prj_report_image.tpl', 
							img = approved_report_img_web,
							alt = 'Approved in report',
							status = json_data['msg'] ),
			'diff': template( 
							template='prj_report_image.tpl', 
							img = diff_img_web,
							alt = 'Diff',
							status = json_data['msg'] )
		}
		json_data['status'] = "OK"
		return json_data
	return access_error( project )

#approve json
@app.post( "/ajax/<action>")
def ajax( action ):
	json_data = json.load(bottle.request.body)
	
	if action in ( 'approve', 'cancel-approve'):
		return approve_or_cancel_action(json_data)
	return {'status':'ERROR', 'msg':'BAD ACTION: '+action}


def approve_or_cancel_action( json_data ):
	json_answer = { "status":'OK', "msg": "Success", "items":{} }
	for item in json_data:
		try:
			route = app.match({'PATH_INFO': item['path'], 'REQUEST_METHOD': 'GET'} )
			item_result = json.loads(route[0].call( **route[1] ) )
		except:
			item_result = {'status': 'ERROR', 'msg': 'Error. Bad request data: path: ' + item['path']+ ' num:' + item['num'] }
			json_answer['status'] = "ERROR"
		json_answer['items'][ item['num'] ] = item_result
	return json_answer

#remove report
@app.route('/<project>/ajax/delete/report/<timestamp>')
def index(project,timestamp):
	#remove report
	if accessible( project ):
		path = config['data_storage_root'] + os.sep + project + os.sep + 'reports' + os.sep + timestamp + os.sep
		if os.path.isdir( path ):
			shutil.rmtree( path )
			return {'status':'OK','msg':'removed'}
		else:
			return {'status':'ERROR', 'msg':'report not exists'}
	return access_error( project )

#export approved images in zip archieve
@app.route('/<project>/ajax/export/approved/zip')
def index(project):
	zipfilename = project + '.zip'
	zipfilepath = config['tmp_root'] + os.sep + zipfilename
	what_need_zip = config['data_storage_root'] + os.sep + project + os.sep + 'approved'
	root = os.path.realpath( what_need_zip )
	print root
	#create zip archieve in tmp file
	if os.path.isdir( root ):
		files = glob.glob( what_need_zip + os.sep + '*' + os.sep + '*' + os.sep + 'approved.png' )
		if len(files) < 1:
			files = glob.glob( what_need_zip + os.sep + '*' + os.sep + '*' + os.sep )
		zf = zipfile.ZipFile( zipfilepath, "w",zipfile.ZIP_DEFLATED)
		for filepath in files:
			zf.write( filepath , os.sep + os.path.relpath(filepath, root) )
		zf.close()
	    #if file created
		if os.path.isfile( zipfilepath ):
			retfile = bottle.static_file(zipfilename, root=config['tmp_root'], download= project + '_approved.zip')
			#remove tmp file
			os.remove( zipfilepath )
			return retfile
	return json_error( "Sorry. Have not approved files")

#import approved images
#todo catch errors
@app.route('/<project>/ajax/import/approved/zip',method='POST')
def index(project):
	if accessible( project ):
		upload = bottle.request.files.get('upload') 
		if (upload):
			name, ext = os.path.splitext(upload.filename)
			print name
			if ext not in ('.zip','.ZIP'):
				return json_error( "File extension " + cgi.escape( ext ) + " not allowed." )
			if name+".zip" == project+'_approved.zip':
				file_path = config['tmp_root']+os.sep+ str( uuid.uuid4() )+'.zip'
				print file_path
				upload.save(file_path)
				prj_root = config['data_storage_root'] + os.sep + project + os.sep + 'approved'	
				if (os.path.isdir(prj_root) ):
					with zipfile.ZipFile(file_path, "r") as z:
						z.extractall( project )
					return { "status":"OK", 'msg':"OK" }
				return json_error( "Project not exists")
			return json_error( "Bad file name")
		return json_error("You forgot send file")
	return access_error( project )

bottle.run( app=app, host=config['web']['host'], port=config['web']['port'])
