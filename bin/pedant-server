#!/usr/bin/python
import __init__,os,sys,glob,shutil,zipfile,uuid,json,cgi,fnmatch,threading
from bottle import bottle
from pedant.webapp import *
from pedant.screenshots import Application as PedantScreens
from pedant.screenshots.Application import generate_pathes

"""
TODO: REFACTORING. Move operations to pedant package
"""


config = json.load( open(os.path.realpath( os.path.dirname( __file__ ) + os.sep + "pedant.conf.json" ) ))
config[ 'pedant_root' ] = os.path.realpath( os.path.dirname( __file__ ) + os.sep +'..'+ os.sep )
config[ 'data_storage_root' ] = os.path.realpath( config[ 'pedant_root' ] + os.sep +'web'+ os.sep +'data_storage' )
config[ 'tmp_root' ] = os.path.realpath( config[ 'pedant_root' ] + os.sep + 'tmp' )

#create tmp dir
if not os.path.isdir( config['tmp_root'] ):
	os.makedirs( config['tmp_root'] )

app = bottle.Bottle()
#templates_dir init in pedant.webapp module
bottle.TEMPLATE_PATH.insert(0, templates_dir)


def json_error( err_type, str_data ):
	messages = {
		'DEFAULT': '{0}',
		'PATH_PERMISSION': 'Have not permission for path <{}>',
		'PATH_NOT_FOUND': 'File ({}) not found',
		'PRJ_ACCESS': 'Project ({}) is locked. Stop all instances of pedant and remove lock file in project folder for continue',
		'BAD_ACTION': 'Unknown action ({})',
		'BAD_DATA': 'Bad data ({})',
	}
	if not messages.has_key( err_type ):
		err_type = 'DEFAULT'

	return { 'status':'ERROR', 'msg': messages[ err_type ].format( str_data ) }

def json_data( msg = 'OK' , additional = {} ):
	answer = { 'status':'OK', 'msg': msg }
	answer.update( additional )
	return answer

#pedant static
@app.route('/assets/<path:path>')
def callback(path):
    return bottle.static_file(path,templates_dir + os.sep + 'assets')

#pedant report images
@app.route('/projects/<project>/static/<path:path>')
def callback(project,path):
	print config['data_storage_root']+os.sep+project + path 
	return bottle.static_file(path,config['data_storage_root']+os.sep+project)

#coming soon page
@app.route('/coming_soon')
@bottle.view('coming_soon.tpl')
def index():
	return {}

def get_project_list():
	return map(lambda name: { 
		'name': os.path.basename( os.path.dirname(name) ), 
		'edit': os.path.isfile( name + os.sep + 'pedant.json' ) 
		},
		glob.glob( config['data_storage_root'] + os.sep + '*' + os.sep ) )

#main page
@app.route('/')
@bottle.view('index.tpl')
def index():
	bottle.redirect( "/projects" )

#main page
@app.route('/projects')
@bottle.view('prj_index.tpl')
def projects():
	prj_list = get_project_list()
	return { 
		'prj_list': json.dumps( prj_list ), 
		'search_directory': config['pedant_root'],
		'crumbs': [ 
			{'additional_class':'','link':'/','text':'Home'}, 
			{'additional_class':'active','text':'Projects'} ]
		}

#project main page. static
@app.route('/projects/<project>')
def index(project):
	bottle.redirect( project+"/reports")

#new project
@app.route('/projects/new')
@bottle.view('prj_edit.tpl')
def index():
	app = PedantScreens.Application()
	prj_config = app.get_default_config()
	prj_config['prj_name'] = 'My awesome project'
	return { 
		'config': prj_config , 
		'action':'add', 
		'default_browsers' : {
			"ANDROID" : { 'unid':"ANDROID_800x600", 'type':"ANDROID", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome android browser", 'desired_capabilities': {'platform': 'ANDROID', 'browserName': 'android', 'version': '', 'javascriptEnabled': True} },
			"CHROME" : { 'unid':"CHROME_800x600", 'type':"CHROME", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome chrome browser", 'desired_capabilities': {'platform': 'ANY', 'browserName': 'chrome', 'version': '', 'javascriptEnabled': True} },
			"FIREFOX" : { 'unid':"FIREFOX_800x600", 'type':"FIREFOX", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome firefox browser", 'desired_capabilities': {'platform': 'ANY', 'browserName': 'firefox', 'version': '', 'javascriptEnabled': True} },
			"INTERNETEXPLORER" : { 'unid':"INTERNETEXPLORER_800x600", 'type':"INTERNETEXPLORER", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "IE", 'desired_capabilities': {'platform': 'WINDOWS', 'browserName': 'internet explorer', 'version': '', 'javascriptEnabled': True} },
			"IPAD" : { 'unid':"IPAD_800x600", 'type':"IPAD", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome ipad browser", 'desired_capabilities': {'platform': 'MAC', 'browserName': 'iPad', 'version': '', 'javascriptEnabled': True} },
			"IPHONE" : { 'unid':"IPHONE_800x600", 'type':"IPHONE", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome iphone browser", 'desired_capabilities': {'platform': 'MAC', 'browserName': 'iPhone', 'version': '', 'javascriptEnabled': True} },
			"OPERA" : { 'unid':"OPERA_800x600", 'type':"OPERA", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome opera browser", 'desired_capabilities': {'platform': 'ANY', 'browserName': 'opera', 'version': '', 'javascriptEnabled': True} },
			"PHANTOMJS" : { 'unid':"PHANTOMJS_800x600", 'type':"PHANTOMJS", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome phantom browser", 'desired_capabilities': {'platform': 'ANY', 'browserName': 'phantomjs', 'version': '', 'javascriptEnabled': True, "phantomjs.page.settings.resourceTimeout": "3000" } },
			"SAFARI" : { 'unid':"SAFARI_800x600", 'type':"SAFARI", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome safari browser", 'desired_capabilities': {'platform': 'ANY', 'browserName': 'safari', 'version': '', 'javascriptEnabled': True} }
		},
		'config_str':json.dumps( prj_config ) ,
		'crumbs': [ 
			{'additional_class':'','link':'/','text':'Home'},
			{'additional_class':'', 'link':'/projects','text':'Projects'},
			{'additional_class':'active','text':'New'} ]
		}

#edit project
@app.route('/projects/<project>/edit')
@bottle.view('prj_edit.tpl')
def index( project ):
	#read config from json file
	prj_dir = config['data_storage_root'] + os.sep + project
	app = PedantScreens.Application()
	if ( os.path.isdir(prj_dir) ):
		prj_config = app.get_project_config( prj_dir )
	else:
		bottle.redirect( "/" )
	urls_file = config['data_storage_root'] + os.sep + project + os.sep + 'urls.json'
	if os.path.isfile( urls_file ):
		prj_config['urls'] = json.load( open( urls_file ) )
	else:
		prj_config['without_urls'] = True
	print prj_config
	return { 
		'config': prj_config,
		'action':'update', 
		'config_str':json.dumps( prj_config ),
		'default_browsers' : json.dumps( {
			"ANDROID" : { 'unid':"ANDROID_800x600", 'type':"ANDROID", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome android browser", 'desired_capabilities': {'platform': 'ANDROID', 'browserName': 'android', 'version': '', 'javascriptEnabled': True} },
			"CHROME" : { 'unid':"CHROME_800x600", 'type':"CHROME", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome chrome browser", 'desired_capabilities': {'platform': 'ANY', 'browserName': 'chrome', 'version': '', 'javascriptEnabled': True} },
			"FIREFOX" : { 'unid':"FIREFOX_800x600", 'type':"FIREFOX", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome firefox browser", 'desired_capabilities': {'platform': 'ANY', 'browserName': 'firefox', 'version': '', 'javascriptEnabled': True} },
			"INTERNETEXPLORER" : { 'unid':"INTERNETEXPLORER_800x600", 'type':"INTERNETEXPLORER", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "IE", 'desired_capabilities': {'platform': 'WINDOWS', 'browserName': 'internet explorer', 'version': '', 'javascriptEnabled': True} },
			"IPAD" : { 'unid':"IPAD_800x600", 'type':"IPAD", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome ipad browser", 'desired_capabilities': {'platform': 'MAC', 'browserName': 'iPad', 'version': '', 'javascriptEnabled': True} },
			"IPHONE" : { 'unid':"IPHONE_800x600", 'type':"IPHONE", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome iphone browser", 'desired_capabilities': {'platform': 'MAC', 'browserName': 'iPhone', 'version': '', 'javascriptEnabled': True} },
			"OPERA" : { 'unid':"OPERA_800x600", 'type':"OPERA", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome opera browser", 'desired_capabilities': {'platform': 'ANY', 'browserName': 'opera', 'version': '', 'javascriptEnabled': True} },
			"PHANTOMJS" : { 'unid':"PHANTOMJS_800x600", 'type':"PHANTOMJS", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome phantom browser", 'desired_capabilities': {'platform': 'ANY', 'browserName': 'phantomjs', 'version': '', 'javascriptEnabled': True, "phantomjs.page.settings.resourceTimeout": "3000" } },
			"SAFARI" : { 'unid':"SAFARI_800x600", 'type':"SAFARI", 'window_size':[800,600], 'wd_url': "http://127.0.0.1:4444/wd/hub", 'info': "My awesome safari browser", 'desired_capabilities': {'platform': 'ANY', 'browserName': 'safari', 'version': '', 'javascriptEnabled': True} }
		} ),
		'crumbs': [ 
			{'additional_class':'','link':'/','text':'Home'},
			{'additional_class':'', 'link':'/projects','text':'Projects'},
			{'additional_class':'','link':'/projects/'+project,'text':project},
			{'additional_class':'active','text':'Edit'}
			 	] }

#launch project page
@app.route('/projects/<project>/launch')
@bottle.view('prj_launch.tpl')
def index( project ):
	#read config from json file
	app = PedantScreens.Application()
	prj_dir = config['data_storage_root'] + os.sep + project
	if ( os.path.isdir(prj_dir) ):
		prj_config = app.get_project_config( prj_dir )
	urls_file = config['data_storage_root'] + os.sep + project + os.sep + 'urls.json' 
	if os.path.isfile( urls_file ):
		prj_config['urls'] = json.load( open( urls_file ) )
	else:
		prj_config['urls'] = []
	return { 
		'config': prj_config, 
		'config_str':json.dumps( prj_config ),
		'crumbs': [ 
				{'additional_class':'','link':'/','text':'Home'},
				{'additional_class':'', 'link':'/projects','text':'Projects'},
				{'additional_class':'','link':'/projects/'+project,'text':project},
				{'additional_class':'active','text':'Launch'}
			 	] }

#project reports list. reports
@app.route('/projects/<project>/reports')
@bottle.view('prj_reports.tpl')
def index(project):
	rep_list = map(lambda x: os.path.basename( os.path.dirname(x) ), glob.glob( config['data_storage_root'] + os.sep + project + os.sep + 'reports' + os.sep + '*' + os.sep ) )
	rep_list.sort( reverse=True )
	return { 
		'project': project, 
		'reports_list': rep_list,
		'crumbs': [ 
				{'additional_class':'','link':'/','text':'Home'},
				{'additional_class':'', 'link':'/projects','text':'Projects'},
				{'additional_class':'','link':'/projects/'+project,'text':project},
				{'additional_class':'active','text':'Reports'}
			 	] }

#project last report
@app.route('/projects/<project>/reports/last')
@bottle.view('prj_report.tpl')
def index(project):
	rep_list = map(lambda x: os.path.basename( os.path.dirname(x) ), glob.glob( config['data_storage_root'] + os.sep + '*' + os.sep + 'reports' + os.sep + '*' + os.sep ) )
	rep_list.sort( reverse=True )
	if len( rep_list ) < 1:
		bottle.redirect( "/projects/" + project + "/reports")
	pathes = generate_pathes( config['data_storage_root'], project )
	app = PedantScreens.Application()
	prj_config = app.get_project_config( pathes['prj_root'] )
	prj_config['data_storage_root'] = config['data_storage_root'] + os.sep + project
	app.configure( prj_config , 'full' , rep_list[0] )

	return { 
		'project': project, 
		'timestamp': rep_list[0] , 
		'report_list': json.dumps( app.get_report() ),
		'crumbs': [ 
				{'additional_class':'','link':'/','text':'Home'},
				{'additional_class':'', 'link':'/projects','text':'Projects'},
				{'additional_class':'','link':'/projects/'+project,'text':project},
				{'additional_class':'','link':'/projects/'+project+'/reports','text':'Reports'},
				{'additional_class':'active','text':'Last report'}
			 	] }

#project report detail
@app.route('/projects/<project>/reports/<timestamp>')
@bottle.view('prj_report.tpl')
def index(project,timestamp):
	pathes = generate_pathes( config['data_storage_root'], project )
	app = PedantScreens.Application()
	prj_config = app.get_project_config( pathes['prj_root'] )
	prj_config['data_storage_root'] = config['data_storage_root'] + os.sep + project
	app.configure( prj_config , 'full' , timestamp )
	return { 
		'project': project,
		'timestamp' :timestamp, 
		'report_list' : json.dumps( app.get_report() ),
		'crumbs': [ 
				{'additional_class':'','link':'/','text':'Home'},
				{'additional_class':'', 'link':'/projects','text':'Projects'},
				{'additional_class':'','link':'/projects/'+project,'text':project},
				{'additional_class':'','link':'/projects/'+project+'/reports','text':'Reports'},
				{'additional_class':'active','text':timestamp}
			 	] }

#project approved images
@app.route('/projects/<project>/approved')
@bottle.view('prj_approved.tpl')
def index(project):
	pathes = generate_pathes( config['data_storage_root'], project )
	app = PedantScreens.Application()
	prj_config = app.get_project_config( pathes['prj_root'] )
	prj_config['data_storage_root'] = config['data_storage_root'] + os.sep + project
	app.configure( prj_config , 'full' )
	return { 
		'project': project, 
		'items': json.dumps( app.get_approved_images() ),
		'crumbs': [ 
				{'additional_class':'','link':'/','text':'Home'},
				{'additional_class':'', 'link':'/projects','text':'Projects'},
				{'additional_class':'','link':'/projects/'+project,'text':project},
				{'additional_class':'active','text':'Approved'}
			 	] }

#project item timeline
@app.route('/projects/<project>/timeline/<item>')
def index(project,item):
	return bottle.redirect("/coming_soon")
	
#approve actual image in project file
@app.route('/ajax/projects/<project>/approve/<timestamp>/<item>/<browser>')
def approve(project,timestamp,item,browser):

	pathes = generate_pathes( config['data_storage_root'], project, timestamp, item, browser )
	app = PedantScreens.Application()
	prj_config = app.get_project_config( pathes['prj_root'] )
	prj_config['data_storage_root'] = config['data_storage_root'] + os.sep + project
	app.configure( prj_config , 'full' , timestamp )

	if app.access() and os.path.isfile( pathes['report_json'] ):
		return json_data( '' , app.approve_image( item, browser ) )
	return json_error( 'PRJ_ACCESS', project )

#delete approved image
@app.route('/ajax/projects/<project>/images/approved/delete/<item>/<browser>')
def delete_approved(project,item,browser):
	pathes = generate_pathes( config['data_storage_root'], project, '', item, browser )
	os.remove( pathes['approved_image'] ) if os.path.isfile( pathes['approved_image'] ) else None
	#if have not approved - success result	
	return json_data( 'Image ('+pathes['approved_image']+') removed' ) if not os.path.isfile( pathes['approved_image'] ) else None
	#error
	return json_error( 'PATH_NOT_FOUND' , file_path )

#disapprove actual image in project file
@app.route('/ajax/projects/<project>/cancel-approve/<timestamp>/<item>/<browser>')
def cancel_approve(project,timestamp,item,browser):
	pathes = generate_pathes( config['data_storage_root'], project, timestamp, item, browser )
	app = PedantScreens.Application()
	prj_config = app.get_project_config( pathes['prj_root'] )
	prj_config['data_storage_root'] = config['data_storage_root'] + os.sep + project
	app.configure( prj_config , 'full' , timestamp )

	if app.access() and os.path.isfile( pathes['report_json_bckp'] ):
		return json_data( '', app.cancel_approve_image( item, browser ) )
	return json_error( 'PRJ_ACCESS' , project )

#approve json
@app.post( "/ajax/projects/image/<action>")
def ajax( action ):
	json_post = json.load(bottle.request.body)
	if action in ( 'approve', 'cancel-approve'):
		return approve_or_cancel_action(json_post)
	return json_error( 'DEFAULT', 'BAD ACTION: '+action )

def approve_or_cancel_action( json_post ):
	json_answer = { "status":'OK', "msg": "Success", "items":[] }
	for item in json_post:
		try:
			route = app.match({'PATH_INFO': item['path'], 'REQUEST_METHOD': 'GET'} )
			item_result = json.loads(route[0].call( **route[1] ) )
			if item_result['status'] != 'OK':
				json_answer['status'] = item_result['status']
		except Exception as e:
			item_result = {'status': 'ERROR', 'msg': ( 'Error ' + item['path'] + ', el_id: ' + item['element_id'] + 'Exception (%s)' % str(e) ) }
			json_answer['status'] = "ERROR"
		json_answer['msg'] += item_result['msg'] + '<br>'
		item_result[ 'element_id' ] = item['element_id']
		json_answer['items'].append( item_result )
	return json_answer

#remove report
@app.route('/ajax/projects/<project>/delete/report/<timestamp>')
def index(project,timestamp):
	#remove report
	pathes = generate_pathes( config['data_storage_root'], project, timestamp )
	app = PedantScreens.Application()
	prj_config = app.get_project_config( pathes['prj_root'] )
	prj_config['data_storage_root'] = config['data_storage_root'] + os.sep + project
	app.configure( prj_config , 'full' , timestamp )
	if app.access():
		path = config['data_storage_root'] + os.sep + project + os.sep + 'reports' + os.sep + timestamp + os.sep
		if os.path.isdir( path ):
			shutil.rmtree( path )
			return json_data( 'Removed' )
		else:
			return json_error( 'PATH_NOT_FOUND', path )
	return access_error( project )

#add new project from web interface
@app.post( "/ajax/projects/add" )
def ajax():
	json_post = json.load(bottle.request.body)
	app = PedantScreens.Application()
	prj_config = app.check_config( json_post )
	if (  prj_config.has_key( 'error' ) ):
		return {'status':'ERROR', 'msg': prj_config['error'] }
	if prj_config.has_key( 'oldName' ):
		del prj_config['oldName']
	prj_root_dir = config['data_storage_root'] + os.sep + prj_config['prj_name']
	config_file = prj_root_dir + os.sep + 'pedant.json'
	#check root dir not exists
	if os.path.isdir(prj_root_dir):
		return json_error( 'DEFAULT', 'Project directory with this name already exists ('+prj_root_dir+'). Remove it for continue' )
	#create project root dir
	if os.makedirs(prj_root_dir) is False:
		return json_error('PATH_PERMISSION', prj_root_dir )
	prj_config = app.save_project_config( prj_root_dir, prj_config )
	#return result
	return json_data( 'Project updated. You will be redirect to edit page', 
			{'config': prj_config, 'url':'/projects/'+ prj_config['prj_name'] + '/edit'} )
			

#add new project from web interface
@app.get( "/ajax/projects/remove/<prj_name>")
def ajax( prj_name ):
	prj_dir = config['data_storage_root'] + os.sep + prj_name
	if (os.path.isdir( prj_dir ) ):
		shutil.rmtree( prj_dir )
		return json_data( "Project "+prj_dir+' deleted' )
	else:
		return json_error( 'PATH_NOT_FOUND', prj_dir )

#add new project from web interface
@app.post( "/ajax/projects/update")
def ajax():
	json_post = json.load(bottle.request.body)
	app = PedantScreens.Application()
	prj_config = app.check_config( json_post )
	if (  prj_config.has_key( 'error' ) ):
		return json_error( 'DEFAULT', prj_config['error'] )

	prj_root_dir = config['data_storage_root'] + os.sep + prj_config['prj_name']

	#rename existing project
	if prj_config.has_key( 'oldName' ):
		old_root_dir = config['data_storage_root'] + os.sep + prj_config['oldName']
		# check dir is writeable
		#rename folder
		if os.path.isdir(prj_root_dir):
			return json_error( 'DEFAULT', 'Project directory with name  ('+prj_root_dir+') already exists. Type another name' )
		os.rename( old_root_dir , prj_root_dir )
		#change name in config
		del prj_config['oldName']
	app.save_project_config( prj_root_dir, prj_config )

	#return result
	return json_data( 'Project updated. You will be redirect to edit page' , {'url':'/projects/'+ prj_config['prj_name'] + '/edit'} )

#ajax launch project
@app.route( '/ajax/projects/<name>/launch/start' , method='POST' )
def index( name ):
	mode = json.load(bottle.request.body)['mode']
	prj_config = json.load(bottle.request.body)['config']
	if ( pedant_screen_instances.has_key(name) and pedant_screen_instances[ name ]["app"].is_runned() ):
		pass
	else:
		prj_dir = config['data_storage_root'] + os.sep + name
		app = PedantScreens.Application()
		if ( prj_config ):
			#if config in post - run it
			prj_config = app.check_config( prj_config )
			if prj_config.has_key( 'error' ):
				return json_error('DEFAULT', prj_config['error'] ) 
			# get urls from post
			prj_config['urls'] = app.make_urls_from_list( prj_config['urls'] )
		else:
			#read config from file
			prj_config = app.get_project_config( prj_dir )
			# get urls from file
			urls_file = config['data_storage_root'] + os.sep + prj_config['prj_name'] + os.sep + 'urls.json'
			print urls_file
			if os.path.isfile(urls_file):
				prj_config['urls'] = app.make_urls_from_list( json.load( open( urls_file ) ) )
			else:
				return json_error( 'DEFAULT', 'Urls file not found in project dir. Can not continue' )
		prj_config['logging'] = True
		prj_config['data_storage_root'] = prj_dir
		if not prj_config['modes'].has_key( mode ):
			return json_error( 'DEFAULT', 'Bad mode: ' + mode )
		app.configure( prj_config, mode )
		if ( not app.lock() ):
			return json_error( 'DEFAULT', "Failed. Project is locked. Already runned?" )
		t = threading.Thread(target=app.start)
		t.start()
		pedant_screen_instances[ name ] = {
			'app' : app,
			'thread' : t
		}
	timestamp = pedant_screen_instances[ name ]["app"].get_timestamp()
	return json_data( 'Project been started', { 'state_url': '/ajax/projects/'+name+'/launch/log/'+ str(timestamp) } )

#ajax launch project
@app.route('/ajax/projects/<name>/launch/stop')
def index( name ):
	#find instance
	if pedant_screen_instances.has_key(name):
		pedant_screen_instances[ name ]["app"].stop()
	return json_data( 'Stop procedure runned. Wait while project been stopped' )

#ajax get project log
@app.route('/ajax/projects/<name>/launch/log/<timestamp>')
def index(name,timestamp):
	#if log file exists - return it
	log_file = config['data_storage_root'] + os.sep + name + os.sep + 'logs' + os.sep + timestamp + '.log'
	if ( os.path.isfile(log_file) ):
		with open(log_file, 'r') as content_file:
			content = content_file.read()
		#print content
		state = 'N\A'
		if pedant_screen_instances.has_key(name):
			if pedant_screen_instances[ name ]["app"].is_runned():
				state = 'Runned'
			else:
				state = 'Stopped'
				#kill instance of app
				del pedant_screen_instances[ name ]
		return json_data( content, { 'state': state } )
	return json_error( 'PATH_NOT_FOUND', log_file )

#find all projects in dir
#TODO: check file location not in data_storage and create link file
@app.route('/ajax/projects/scan', method='POST')
def index():
	dirname = json.load(bottle.request.body)['path']#.json['dirname']
	#print dirname
	msg = ''
	if( dirname and os.path.isdir( dirname ) ):
		files = recursive_projects_search( dirname )
		result = {}
		messages = []
		app = PedantScreens.Application()

		for file in files:

			detected_config = app.check_config( app.get_project_config( os.path.dirname( file ) ), ignore_urls=True )
			if ( detected_config.has_key('error') ):
				messages.append( 'Project config ' + file + ' was skipped: ' + detected_config['error'] )
				continue
			project_path = config['data_storage_root'] + os.sep + detected_config['prj_name']
			#
			prj_name = detected_config['prj_name']
			config_link = project_path + os.sep + 'pedant.json'
			urls_file = os.path.dirname( file ) + os.sep + 'urls.json'
			urls_link = project_path + os.sep + 'urls.json'
			#remove existing links for this project
			if ( os.path.isdir( project_path ) ):
				print config_link
				print file
				if ( os.path.isfile( config_link ) ):
					print config_link
					os.remove( config_link )

				if ( os.path.isfile(urls_link) ):
					os.remove( urls_link )
				messages.append( "Project " + prj_name + " been updated" )
			#make new project dir in data storage
			else:
				messages.append( "Project " + prj_name + " been created" )
				os.makedirs( project_path , 0777 )
			#try create symlink
			try:
				app.symlink( file, config_link )
				# if urls.json file exists - create symlink to it too
				if ( os.path.isfile( urls_file ) ):
					app.symlink( urls_file, urls_link )
			except Exception, e:
				return json_error( 'DEFAULT', ( '%s' % e ) )

		return json_data( '<br>'.join(messages), { "projects": get_project_list() }  )
	return json_error( 'PATH_NOT_FOUND' , dirname )

def recursive_projects_search( dirname ):
	matches = []
	for root, dirnames, filenames in os.walk( dirname ):
		for filename in fnmatch.filter(filenames, 'pedant.json'):
			if not root.startswith( config[ 'data_storage_root' ] ):
				matches.append( os.path.join(root, filename) )
	return matches

#export approved images in zip archieve
@app.route('/ajax/projects/<project>/export/approved/zip')
def index(project):
	zipfilename = project + '.zip'
	zipfilepath = config['tmp_root'] + os.sep + zipfilename
	what_need_zip = config['data_storage_root'] + os.sep + project + os.sep + 'approved'
	root = os.path.realpath( what_need_zip )
	print root
	#create zip archieve in tmp file
	if os.path.isdir( root ):
		files = glob.glob( what_need_zip + os.sep + '*' + os.sep + '*' + os.sep + 'approved.png' )
		if len(files) < 1:
			files = glob.glob( what_need_zip + os.sep + '*' + os.sep + '*' + os.sep )
		zf = zipfile.ZipFile( zipfilepath, "w",zipfile.ZIP_DEFLATED)
		for filepath in files:
			zf.write( filepath , os.sep + os.path.relpath(filepath, root) )
		zf.close()
	    #if file created
		if os.path.isfile( zipfilepath ):
			retfile = bottle.static_file(zipfilename, root=config['tmp_root'], download= project + '_approved.zip')
			#remove tmp file
			os.remove( zipfilepath )
			return retfile
	return json_error( 'DEFAULT' , "Sorry. Have not approved files")

#import approved images
#todo catch errors
@app.route('/ajax/projects/<project>/import/approved/zip',method='POST')
def index(project):
	pathes = generate_pathes( config['data_storage_root'], project )
	app = PedantScreens.Application()
	prj_config = app.get_project_config( pathes['prj_root'] )
	prj_config['data_storage_root'] = config['data_storage_root'] + os.sep + project
	app.configure( prj_config , 'full' , '' )

	if app.access():
		upload = bottle.request.files.get('upload') 
		if (upload):
			name, ext = os.path.splitext(upload.filename)
			if ext not in ('.zip','.ZIP'):
				return json_error( 'DEFAULT', "File extension " + cgi.escape( ext ) + " not allowed." )
			if name+".zip" == project+'_approved.zip':
				file_path = config['tmp_root']+os.sep+ str( uuid.uuid4() )+'.zip'
				upload.save(file_path)
				prj_root = config['data_storage_root'] + os.sep + project + os.sep + 'approved'	
				if (os.path.isdir(prj_root) ):
					with zipfile.ZipFile(file_path, "r") as z:
						z.extractall( project )
					return json_data( 'OK' )
				return json_error( 'PATH_NOT_FOUND', prj_root )
			return json_error( 'DEFAULT', "Bad file name")
		return json_error( 'DEFAULT', "You forgot send file")
	return json_error( 'PRJ_ACCESS', project )

pedant_screen_instances = {}
bottle.run( app=app, host=config['web']['host'], port=config['web']['port'])