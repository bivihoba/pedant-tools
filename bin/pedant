#!/usr/bin/python

import __init__,os,sys,uuid,glob,argparse,re

# cmd_folder = os.path.realpath( __file__ + '/../../lib/python/' )
# if cmd_folder not in sys.path:
# 	sys.path.insert(0, cmd_folder)

from pedant.cli_app import Application 

#get list for sources need scanning
def getSourcesList( mask , prj_name ):
	local_src_list = os.getcwd() + os.sep + 'sources.list'
	sources = []
	print local_src_list
	if os.path.isfile(local_src_list):
		loc_sources = {}
		execfile( local_src_list , loc_sources )
		for item in loc_sources['sources']:
			name = re.sub('[^0-9a-zA-Z_]+', '_', item['url']) 
			if not item.has_key('scripts'):
				item['scripts'] = []
			if not item.has_key('wait_scripts'):
				item['wait_scripts'] = []
				
			sources.append(
				{
					'url' : item['url'],
					'name' : name,
					'unid' : name,
					'scripts' : item['scripts'],
					'wait_scripts' : item['wait_scripts'],
				} )
	#else get pathes from current directory
	else:
		for item in glob.glob('./*.html'):
			item_name = os.path.basename(item)
			sources.append(
				{
					'url' : mask.replace( '#ITEM_NAME#', item_name ).replace( '#PRJ_NAME#' , prj_name ),
					'name' : item_name,
					'unid' : item_name,
					'scripts' : [],
					'wait_scripts' : [],
				} )
	if len( sources ) < 1:
		print 'Pedant not found items for checking in current folder'
		sys.exit(0)
	#print sources[0]
	#sys.exit(0)
	return sources

#get config
def buildConf():
	config = {}
	local_config = {}
	local_conf_file = os.path.realpath( os.getcwd() + os.sep + "pedant.conf" )
	#read global config
	if __name__ == "__main__":
	    execfile( os.path.realpath( __file__ + os.sep + '..' + os.sep + "pedant.conf"), config)
	#read local config
	if __name__ == "__main__" and os.path.isfile(local_conf_file):
		execfile( local_conf_file , config )
		#config = dict( config.items() + local_config.items() )
	return config


def buildBrowsersList( browsers ):
	#set uniq keys
	setted = {}

	for browser in browsers:
		unid = browser[ 'name' ] + '_' + str( browser['window_size'][0] ) + 'x' + str( browser['window_size'][1] )
		if setted.has_key( unid ):
			print 'Pedant find browser duplicate in current configuration. Problem browser is: ' + unid
			sys.exit(0)
		browser['unid'] = unid
		if not browser.has_key( 'info' ):
			browser['info'] = 'no info'
		setted[ unid ] = browser
	#print setted.values()
	#sys.exit(0)
	return setted.values()

#parse arguments
parser = argparse.ArgumentParser()
parser.add_argument( "-m", "--mode", type=str , choices=['fast','full'],help="Pedant working mode", default='fast')
args = parser.parse_args()

config = buildConf()
browsers = buildBrowsersList( config[ args.mode ] )

app = Application( {
		'items':getSourcesList( config['url_mask'] , config[ 'prj_name' ] ), 
		'max_workers': config['max_workers'], 
		'browsers':browsers, 
		'data_storage_root':config['prj_data_storage'] } )

app.start()